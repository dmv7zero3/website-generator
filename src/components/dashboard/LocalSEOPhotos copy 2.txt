import React, { useState, useEffect, useCallback } from "react";
import { useDropzone } from "react-dropzone";
import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
  Button,
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
  Tabs,
  TabsList,
  TabsTrigger,
  TabsContent,
  PhotoUploadProgress,
} from "@/components/ui";
import { Upload, X, Image as ImageIcon, Store, Loader2 } from "lucide-react";
import { useToast } from "@/components/ui/UseToast";
import { ApiService } from "@/lib/api";
import { useBusiness } from "@/contexts/BusinessContext";
import { GoogleMapLocation } from "@/types";

// Type definitions
interface Store {
  id: string;
  name: string;
}

interface UploadStatus {
  id: string;
  fileName: string;
  store: string;
  status: "pending" | "uploading" | "success" | "error";
  progress: number;
  error?: string;
  uploadedAt?: string;
  fileKey?: string;
}

interface UploadProgress {
  completed: number;
  total: number;
}

interface UploadResponse {
  fileKey: string;
  success: boolean;
  error?: string;
}

export function LocalSEOPhotos(): JSX.Element {
  // State declarations with type annotations
  const { selectedBusiness } = useBusiness();
  const [stores, setStores] = useState<Store[]>([]);
  const [selectedStore, setSelectedStore] = useState<string>("dc");
  const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);
  const [uploads, setUploads] = useState<UploadStatus[]>([]);
  const [activeTab, setActiveTab] = useState<"upload" | "history">("upload");
  const [totalPhotosSaved, setTotalPhotosSaved] = useState<number>(0);
  const [isPopupVisible, setIsPopupVisible] = useState<boolean>(false);
  const [isUploading, setIsUploading] = useState<boolean>(false);
  const [uploadProgress, setUploadProgress] = useState<UploadProgress>({
    completed: 0,
    total: 0,
  });
  const { toast } = useToast();

  // Load stores on component mount
  useEffect(() => {
    const loadStores = async (): Promise<void> => {
      if (!selectedBusiness) return;

      try {
        const profile = await ApiService.getBusinessProfile(selectedBusiness);
        if (profile?.googleMapLocations) {
          const fetchedStores: Store[] = profile.googleMapLocations.map(
            (location: GoogleMapLocation) => ({
              id: location.id,
              name: location.name,
            })
          );
          setStores(fetchedStores);
        }
      } catch (error) {
        toast({
          title: "Error",
          description: "Failed to load store locations",
          variant: "destructive",
        });
      }
    };

    loadStores();
  }, [selectedBusiness, toast]);

  // File upload handlers
  const onDrop = useCallback((acceptedFiles: File[]) => {
    setUploadedFiles((prev) => [...prev, ...acceptedFiles]);
  }, []);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      "image/*": [".jpeg", ".jpg", ".png", ".gif"],
    },
    maxSize: 5 * 1024 * 1024, // 5MB
  });

  const removeFile = (index: number): void => {
    setUploadedFiles((files) => files.filter((_, i) => i !== index));
  };

  const handleUpload = async (): Promise<void> => {
    if (!selectedStore || uploadedFiles.length === 0) return;

    setIsUploading(true);
    setUploadProgress({ completed: 0, total: uploadedFiles.length });

    for (const file of uploadedFiles) {
      const uploadId = Math.random().toString(36).substr(2, 9);

      // Initialize upload tracking
      const newUpload: UploadStatus = {
        id: uploadId,
        fileName: file.name,
        store: selectedStore,
        status: "pending",
        progress: 0,
      };

      setUploads((prev) => [...prev, newUpload]);

      try {
        // Convert file to Base64
        const fileContent = await new Promise<string>((resolve, reject) => {
          const reader = new FileReader();
          reader.onload = () =>
            resolve((reader.result as string).split(",")[1]);
          reader.onerror = reject;
          reader.readAsDataURL(file);
        });

        setUploads((prev) =>
          prev.map((u) =>
            u.id === uploadId ? { ...u, status: "uploading", progress: 25 } : u
          )
        );

        const response = await fetch(
          "https://x4iemzhvq5.execute-api.us-east-1.amazonaws.com/PROD/local-seo-save-photos-to-s3",
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              fileName: file.name,
              fileContent,
              contentType: file.type,
              storeId: selectedStore,
            }),
          }
        );

        if (!response.ok) {
          throw new Error("Upload failed");
        }

        const responseData: UploadResponse = await response.json();

        setUploads((prev) =>
          prev.map((u) =>
            u.id === uploadId
              ? {
                  ...u,
                  status: "success",
                  progress: 100,
                  fileKey: responseData.fileKey,
                  uploadedAt: new Date().toISOString(),
                }
              : u
          )
        );

        setUploadProgress((prev) => ({
          ...prev,
          completed: prev.completed + 1,
        }));
        setTotalPhotosSaved((prev) => prev + 1);
      } catch (error) {
        setUploads((prev) =>
          prev.map((u) =>
            u.id === uploadId
              ? {
                  ...u,
                  status: "error",
                  progress: 0,
                  error:
                    error instanceof Error ? error.message : "Upload failed",
                }
              : u
          )
        );
      }
    }

    setUploadedFiles([]);
    setIsPopupVisible(true);
    setIsUploading(false);

    toast({
      title: "Upload Complete",
      description: `Successfully uploaded ${uploadProgress.completed} photos`,
    });
  };

  const handleClosePopup = (): void => {
    setIsPopupVisible(false);
  };

  const handleValueChange = (value: string): void => {
    setActiveTab(value as "upload" | "history");
  };

  // Render methods
  if (!selectedBusiness) {
    return (
      <div className="p-6">
        <Card>
          <CardContent className="flex items-center justify-center h-32">
            <p className="text-muted-foreground">
              Please select a business to manage photos
            </p>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="p-6 space-y-6">
      <div>
        <h1 className="text-3xl font-bold tracking-tight">Local SEO Photos</h1>
        <p className="text-muted-foreground">
          Upload photos to your Google Business Profile
        </p>
      </div>

      <Tabs
        value={activeTab}
        onValueChange={(value: string) => handleValueChange(value)}
        className="space-y-4"
      >
        <TabsList>
          <TabsTrigger value="upload">Upload Photos</TabsTrigger>
          <TabsTrigger value="history">Upload History</TabsTrigger>
        </TabsList>

        <TabsContent value="upload" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Store className="w-5 h-5" />
                Select Location
              </CardTitle>
              <CardDescription>
                Choose which store location to upload photos for
              </CardDescription>
            </CardHeader>
            <CardContent>
              <Select value={selectedStore} onValueChange={setSelectedStore}>
                <SelectTrigger className="w-full md:w-[300px]">
                  <SelectValue placeholder="Select a store location..." />
                </SelectTrigger>
                <SelectContent>
                  {stores.map((store) => (
                    <SelectItem key={store.id} value={store.id}>
                      {store.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <ImageIcon className="w-5 h-5" />
                Upload Photos
              </CardTitle>
              <CardDescription>
                Drag and drop photos or click to select files
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div
                {...getRootProps()}
                className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors ${
                  isDragActive
                    ? "border-primary bg-primary/5"
                    : "border-gray-200 hover:border-primary/50"
                }`}
              >
                <input {...getInputProps()} />
                <Upload className="w-10 h-10 mx-auto mb-4 text-gray-400" />
                {isDragActive ? (
                  <p>Drop the files here ...</p>
                ) : (
                  <div>
                    <p className="text-lg font-medium">
                      Drop photos here or click to select
                    </p>
                    <p className="text-sm text-muted-foreground mt-1">
                      Supports JPG, PNG and GIF up to 5MB each
                    </p>
                  </div>
                )}
              </div>

              {uploadedFiles.length > 0 && (
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <h3 className="font-medium">
                      Selected Photos ({uploadedFiles.length})
                    </h3>
                    <div className="flex items-center gap-4">
                      {isUploading && (
                        <span className="text-sm font-medium">
                          Uploading: {uploadProgress.completed}/
                          {uploadProgress.total}
                        </span>
                      )}
                      <Button
                        onClick={handleUpload}
                        disabled={!selectedStore || isUploading}
                      >
                        {isUploading ? (
                          <>
                            <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                            Uploading...
                          </>
                        ) : (
                          <>
                            <Upload className="w-4 h-4 mr-2" />
                            Upload Photos
                          </>
                        )}
                      </Button>
                    </div>
                  </div>

                  <div className="grid gap-4 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4">
                    {uploadedFiles.map((file, index) => (
                      <div key={index} className="relative group">
                        <div className="aspect-square rounded-lg border bg-gray-50 flex items-center justify-center overflow-hidden">
                          <img
                            src={URL.createObjectURL(file)}
                            alt={`Preview ${index + 1}`}
                            className="object-cover w-full h-full"
                          />
                        </div>
                        <button
                          onClick={() => removeFile(index)}
                          className="absolute -top-2 -right-2 bg-white rounded-full p-1 shadow hover:bg-red-50 transition-colors"
                        >
                          <X className="w-4 h-4 text-red-500" />
                        </button>
                        <p className="mt-1 text-sm truncate">{file.name}</p>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="history">
          <Card>
            <CardHeader>
              <CardTitle>Upload History</CardTitle>
              <CardDescription>
                View the status of your photo uploads
              </CardDescription>
            </CardHeader>
            <CardContent>
              <PhotoUploadProgress
                uploads={uploads}
                onClose={handleClosePopup}
              />
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      {isPopupVisible && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
          <div className="bg-white p-6 rounded-lg shadow-lg">
            <PhotoUploadProgress uploads={uploads} onClose={handleClosePopup} />
            <p className="mt-4 text-center">
              Total Photos Saved: {totalPhotosSaved}
            </p>
          </div>
        </div>
      )}
    </div>
  );
}

export default LocalSEOPhotos;
